#!/usr/bin/env python
# -*- coding: utf-8 -*-

import json
import os

from html.parser import HTMLParser

from pelican import signals

from plugins import list_files


class StylesheetParser(HTMLParser):
    """
    Extract stylesheets from an HTML source, storing each found in a class
    variable for later processing.
    """

    def __init__(self):
        super().__init__()
        self.urls = []

    def handle_starttag(self, tag, attrs):
        if tag != "link":
            return

        href = next(value for (name, value) in attrs if name == "href")
        if not href or not href.endswith(".css"):
            return

        self.urls.append(href)


def add_stylesheet_hash(pelican):
    """
    For each HTMl file generated by Pelican, replace each stylesheet's `href`
    attribute with its hashed counterpart, as outlined in the manifest file.

    Checks for a `STYLESHEET_HASHES` configuration entry in the Pelican
    settings, which in turn should contain an `enabled` flag value as well as
    a `manifest` file path. If the configuration is not provided, the plugin
    defaults to disabled.

    :param pelican: The Pelican instance.
    """
    options = pelican.settings.get("STYLESHEET_HASHES", {})
    enabled = options.get("enabled", False)
    if not enabled:
        return

    with open(options.get("manifest"), "r") as f:
        manifest = json.loads(f.read())

    html_files = list_files(pelican.settings["OUTPUT_PATH"], ".html")
    for filename in html_files:
        replace_stylesheet_filename(filename, manifest)


def replace_stylesheet_filename(filename, manifest):
    """
    Replace any occurance of non-hashed stylesheet filenames in generated HTML
    files.

    :param str filename: The filename of the file whose contents to search.
    :param dict manifest: The JSON contents of the manifest file
    """
    with open(filename, "r") as f:
        contents = f.read()

    parser = StylesheetParser()
    parser.feed(contents)

    for sheet in parser.urls:
        (_, name) = os.path.split(os.path.basename(sheet))
        if name in manifest:
            contents = contents.replace(name, manifest[name])

    with open(filename, "w") as f:
        f.write(contents)


def register():
    """
    Replace the default file name of the stylesheet with its hashed version.
    """
    signals.finalized.connect(add_stylesheet_hash)
