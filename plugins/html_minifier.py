#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging

from htmlmin import minify
from pelican import signals

from plugins import list_files


logger = logging.getLogger(__name__)


def minify_html(pelican):
    """
    Minify all HTML files found in the configured output directory.

    Checks for a `MINIFY` configuration entry in the Pelican settings, which
    in turn should contain an `enabled` flag value. If the configuration is
    not provided, the plugin defaults to disabled.

    :param pelican: The Pelican instance.
    """
    options = pelican.settings.get("MINIFY", {})
    enabled = options.get("enabled", False)
    if not enabled:
        return

    html_files = list_files(pelican.settings["OUTPUT_PATH"], ".html")
    for filename in html_files:
        minify_file(filename)


def minify_file(filename):
    """
    Given a path to an HTML file, minify its contents, overwriting the original
    file in the process.

    :param str filename: The file to minify.
    """
    with open(filename, "r") as f:
        contents = f.read()

    try:
        contents = minify(contents)
        with open(filename, "w") as f:
            f.write(contents)
    except Exception as ex:
        logger.critical(f"HTML minification failed: {ex}")


def register():
    """
    Once all HTML files have been generated by pelican, minify each files
    contents using the 'htmlmin' package.

    https://htmlmin.readthedocs.io/en/latest/
    """
    signals.finalized.connect(minify_html)
